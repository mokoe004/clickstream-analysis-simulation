version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sparknet

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "clickstream:1:1"
    depends_on:
      - zookeeper
    volumes:
      - .:/app
    entrypoint:
      - bash
      - -c
      - |
        /app/wait-for-it.sh zookeeper:2181 --timeout=60 --strict --
        sleep 20
        echo "🟢 Zookeeper ist verfügbar – Starte Kafka..."
        /etc/confluent/docker/run
    networks:
      - sparknet

  spark:
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark
    volumes:
      - .:/app
    depends_on:
      - kafka
      - cassandra
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
    entrypoint:
      - bash
      - -c
      - |
        ./wait-for-it.sh kafka:9092 --timeout=60 --strict --
        ./wait-for-it.sh cassandra:9042 --timeout=60 --strict --
        echo '🚀 Starte Spark-Streaming mit --packages...'
        exec /opt/spark/bin/spark-submit \
          --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.6,com.datastax.spark:spark-cassandra-connector_2.12:3.4.1 \
          /app/spark_processor.py

    networks:
      - sparknet

  # For generating csv files which can then be processed with batch layer
  batch-generator:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: >
      bash -c "
      echo '📦 Starte Batch-Datengenerierung...';
      python clickstream_generator/batch_creator.py
      "
    environment:
      - PYTHONPATH=/app
    networks:
      - sparknet

  stream-producer:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: >
      bash -c "
      ./wait-for-it.sh kafka:9092 --timeout=60 --strict -- \
      echo '🌐 Starte Live-Stream Producer...';
      python clickstream_generator/live_producer.py
      "
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=clickstream
      - PYTHONPATH=/app
    networks:
      - sparknet

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "ClickstreamCluster"
      CASSANDRA_START_RPC: "true"
    networks:
      - sparknet

  cassandra-init:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - cassandra
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: >
      bash -c "
      ./wait-for-it.sh cassandra:9042 --timeout=60 --strict -- \
      python init_cassandra.py
      "
    networks:
      - sparknet

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - cassandra-init
      - cassandra
    ports:
      - "8050:8050"
    volumes:
      - .:/app
    working_dir: /app
    entrypoint: >
      bash -c "
      ./wait-for-it.sh cassandra:9042 --timeout=60 --strict -- \
      sleep 20;
      echo '📊 Starting Dashboard...';
      python dashboard/dashboard.py
      "
    networks:
      - sparknet

networks:
  sparknet:

volumes:
  cassandra-data:
